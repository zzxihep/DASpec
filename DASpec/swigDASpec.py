# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swigDASpec
else:
    import _swigDASpec

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


NPAR_MAX = _swigDASpec.NPAR_MAX
NCOMP_MAX = _swigDASpec.NCOMP_MAX
NITER_MAX_LMFIT = _swigDASpec.NITER_MAX_LMFIT
NTEMPLATE_MAX = _swigDASpec.NTEMPLATE_MAX
UNIFORM_LIMIT = _swigDASpec.UNIFORM_LIMIT
TEMPLATE_STEP = _swigDASpec.TEMPLATE_STEP
CONVOLVE_FACTOR = _swigDASpec.CONVOLVE_FACTOR
F2S = _swigDASpec.F2S
PI = _swigDASpec.PI
SQRT2PI = _swigDASpec.SQRT2PI

def gaussian(num, x, y, p):
    return _swigDASpec.gaussian(num, x, y, p)

def lorentzian(num, x, y, p):
    return _swigDASpec.lorentzian(num, x, y, p)

def dgaussian(num, x, y, p):
    return _swigDASpec.dgaussian(num, x, y, p)

def gh4(num, x, y, p):
    return _swigDASpec.gh4(num, x, y, p)

def checkuniform(n, x, y):
    return _swigDASpec.checkuniform(n, x, y)

def smalleststep(n, x, y):
    return _swigDASpec.smalleststep(n, x, y)

def largeststep(n, x, y):
    return _swigDASpec.largeststep(n, x, y)

def convlv_resp_num(p, dlnw, kernel_type):
    return _swigDASpec.convlv_resp_num(p, dlnw, kernel_type)

def convlv_resp(p, dlnw, m, kernel, kernel_type):
    return _swigDASpec.convlv_resp(p, dlnw, m, kernel, kernel_type)

def convolve(n, x, y, yout, p, kernel_type):
    return _swigDASpec.convolve(n, x, y, yout, p, kernel_type)

def correct_redshift(num, wave, flux, err, wave1, flux1, err1, z):
    return _swigDASpec.correct_redshift(num, wave, flux, err, wave1, flux1, err1, z)

def ccm_unred(num, wave, flux, ebv, funred, r_v):
    return _swigDASpec.ccm_unred(num, wave, flux, ebv, funred, r_v)
class component(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    npar = property(_swigDASpec.component_npar_get, _swigDASpec.component_npar_set)
    par = property(_swigDASpec.component_par_get, _swigDASpec.component_par_set)
    profile = property(_swigDASpec.component_profile_get, _swigDASpec.component_profile_set)
    name = property(_swigDASpec.component_name_get, _swigDASpec.component_name_set)

    def info(self):
        return _swigDASpec.component_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.component_calc(self, num, x, y, p)

    def __init__(self):
        _swigDASpec.component_swiginit(self, _swigDASpec.new_component())
    __swig_destroy__ = _swigDASpec.delete_component

# Register component in _swigDASpec:
_swigDASpec.component_swigregister(component)
class line_gaussian(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        _swigDASpec.line_gaussian_swiginit(self, _swigDASpec.new_line_gaussian(c))
    center = property(_swigDASpec.line_gaussian_center_get, _swigDASpec.line_gaussian_center_set)

    def info(self):
        return _swigDASpec.line_gaussian_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.line_gaussian_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_line_gaussian

# Register line_gaussian in _swigDASpec:
_swigDASpec.line_gaussian_swigregister(line_gaussian)
class line_dgaussian(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        _swigDASpec.line_dgaussian_swiginit(self, _swigDASpec.new_line_dgaussian(c))
    center = property(_swigDASpec.line_dgaussian_center_get, _swigDASpec.line_dgaussian_center_set)

    def info(self):
        return _swigDASpec.line_dgaussian_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.line_dgaussian_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_line_dgaussian

# Register line_dgaussian in _swigDASpec:
_swigDASpec.line_dgaussian_swigregister(line_dgaussian)
class line_lorentzian(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        _swigDASpec.line_lorentzian_swiginit(self, _swigDASpec.new_line_lorentzian(c))
    center = property(_swigDASpec.line_lorentzian_center_get, _swigDASpec.line_lorentzian_center_set)

    def info(self):
        return _swigDASpec.line_lorentzian_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.line_lorentzian_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_line_lorentzian

# Register line_lorentzian in _swigDASpec:
_swigDASpec.line_lorentzian_swigregister(line_lorentzian)
class powerlaw(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        _swigDASpec.powerlaw_swiginit(self, _swigDASpec.new_powerlaw(r))
    ref = property(_swigDASpec.powerlaw_ref_get, _swigDASpec.powerlaw_ref_set)

    def info(self):
        return _swigDASpec.powerlaw_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.powerlaw_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_powerlaw

# Register powerlaw in _swigDASpec:
_swigDASpec.powerlaw_swigregister(powerlaw)
class powerlaw_d(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        _swigDASpec.powerlaw_d_swiginit(self, _swigDASpec.new_powerlaw_d(r))
    ref = property(_swigDASpec.powerlaw_d_ref_get, _swigDASpec.powerlaw_d_ref_set)

    def info(self):
        return _swigDASpec.powerlaw_d_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.powerlaw_d_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_powerlaw_d

# Register powerlaw_d in _swigDASpec:
_swigDASpec.powerlaw_d_swigregister(powerlaw_d)
class line_gh4(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        _swigDASpec.line_gh4_swiginit(self, _swigDASpec.new_line_gh4(c))
    center = property(_swigDASpec.line_gh4_center_get, _swigDASpec.line_gh4_center_set)

    def info(self):
        return _swigDASpec.line_gh4_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.line_gh4_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_line_gh4

# Register line_gh4 in _swigDASpec:
_swigDASpec.line_gh4_swigregister(line_gh4)
class template_spec(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num, x, y, k, f_llim=4434.0, f_rlim=4684.0):
        _swigDASpec.template_spec_swiginit(self, _swigDASpec.new_template_spec(num, x, y, k, f_llim, f_rlim))
    templaten = property(_swigDASpec.template_spec_templaten_get, _swigDASpec.template_spec_templaten_set)
    templatex = property(_swigDASpec.template_spec_templatex_get, _swigDASpec.template_spec_templatex_set)
    templatey = property(_swigDASpec.template_spec_templatey_get, _swigDASpec.template_spec_templatey_set)
    kernel = property(_swigDASpec.template_spec_kernel_get, _swigDASpec.template_spec_kernel_set)
    flux_llim = property(_swigDASpec.template_spec_flux_llim_get, _swigDASpec.template_spec_flux_llim_set)
    flux_rlim = property(_swigDASpec.template_spec_flux_rlim_get, _swigDASpec.template_spec_flux_rlim_set)

    def info(self):
        return _swigDASpec.template_spec_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.template_spec_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_template_spec

# Register template_spec in _swigDASpec:
_swigDASpec.template_spec_swigregister(template_spec)
class template_spec_reddened(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num, x, y, k, f_llim=4434.0, f_rlim=4684.0, r=3.1):
        _swigDASpec.template_spec_reddened_swiginit(self, _swigDASpec.new_template_spec_reddened(num, x, y, k, f_llim, f_rlim, r))
    templaten = property(_swigDASpec.template_spec_reddened_templaten_get, _swigDASpec.template_spec_reddened_templaten_set)
    templatex = property(_swigDASpec.template_spec_reddened_templatex_get, _swigDASpec.template_spec_reddened_templatex_set)
    templatey = property(_swigDASpec.template_spec_reddened_templatey_get, _swigDASpec.template_spec_reddened_templatey_set)
    kernel = property(_swigDASpec.template_spec_reddened_kernel_get, _swigDASpec.template_spec_reddened_kernel_set)
    flux_llim = property(_swigDASpec.template_spec_reddened_flux_llim_get, _swigDASpec.template_spec_reddened_flux_llim_set)
    flux_rlim = property(_swigDASpec.template_spec_reddened_flux_rlim_get, _swigDASpec.template_spec_reddened_flux_rlim_set)
    r_v = property(_swigDASpec.template_spec_reddened_r_v_get, _swigDASpec.template_spec_reddened_r_v_set)

    def info(self):
        return _swigDASpec.template_spec_reddened_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.template_spec_reddened_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_template_spec_reddened

# Register template_spec_reddened in _swigDASpec:
_swigDASpec.template_spec_reddened_swigregister(template_spec_reddened)
class balmer_continuum(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigDASpec.balmer_continuum_swiginit(self, _swigDASpec.new_balmer_continuum())

    def info(self):
        return _swigDASpec.balmer_continuum_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.balmer_continuum_calc(self, num, x, y, p)

    def ngaussian(self, num, x, y, np, p):
        return _swigDASpec.balmer_continuum_ngaussian(self, num, x, y, np, p)
    __swig_destroy__ = _swigDASpec.delete_balmer_continuum

# Register balmer_continuum in _swigDASpec:
_swigDASpec.balmer_continuum_swigregister(balmer_continuum)
class ccm_reddening(component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r=3.1):
        _swigDASpec.ccm_reddening_swiginit(self, _swigDASpec.new_ccm_reddening(r))
    r_v = property(_swigDASpec.ccm_reddening_r_v_get, _swigDASpec.ccm_reddening_r_v_set)

    def info(self):
        return _swigDASpec.ccm_reddening_info(self)

    def calc(self, num, x, y, p):
        return _swigDASpec.ccm_reddening_calc(self, num, x, y, p)
    __swig_destroy__ = _swigDASpec.delete_ccm_reddening

# Register ccm_reddening in _swigDASpec:
_swigDASpec.ccm_reddening_swigregister(ccm_reddening)
class compcontainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigDASpec.compcontainer_swiginit(self, _swigDASpec.new_compcontainer())
    ncomp = property(_swigDASpec.compcontainer_ncomp_get, _swigDASpec.compcontainer_ncomp_set)
    npar = property(_swigDASpec.compcontainer_npar_get, _swigDASpec.compcontainer_npar_set)
    comp = property(_swigDASpec.compcontainer_comp_get, _swigDASpec.compcontainer_comp_set)
    nfix = property(_swigDASpec.compcontainer_nfix_get, _swigDASpec.compcontainer_nfix_set)
    ntie = property(_swigDASpec.compcontainer_ntie_get, _swigDASpec.compcontainer_ntie_set)
    fix = property(_swigDASpec.compcontainer_fix_get, _swigDASpec.compcontainer_fix_set)
    fixval = property(_swigDASpec.compcontainer_fixval_get, _swigDASpec.compcontainer_fixval_set)
    tie = property(_swigDASpec.compcontainer_tie_get, _swigDASpec.compcontainer_tie_set)
    tieval = property(_swigDASpec.compcontainer_tieval_get, _swigDASpec.compcontainer_tieval_set)

    def add(self, m):
        return _swigDASpec.compcontainer_add(self, m)

    def info(self):
        return _swigDASpec.compcontainer_info(self)

    def calc_totpar(self, num, x, y, p):
        return _swigDASpec.compcontainer_calc_totpar(self, num, x, y, p)

    def calc(self, num, x, y, p):
        return _swigDASpec.compcontainer_calc(self, num, x, y, p)

    def pars2l(self, p, ptot):
        return _swigDASpec.compcontainer_pars2l(self, p, ptot)

    def parl2s(self, ptot, p):
        return _swigDASpec.compcontainer_parl2s(self, ptot, p)

    def parerrs2l(self, p, ptot):
        return _swigDASpec.compcontainer_parerrs2l(self, p, ptot)

    def findpar(self, c, p):
        return _swigDASpec.compcontainer_findpar(self, c, p)

    def clean(self):
        return _swigDASpec.compcontainer_clean(self)

    def addfix(self, c, p, val):
        return _swigDASpec.compcontainer_addfix(self, c, p, val)

    def addtie(self, c, p, ct, pt, type, val):
        return _swigDASpec.compcontainer_addtie(self, c, p, ct, pt, type, val)

    def addtie_profile(self, c, ct):
        return _swigDASpec.compcontainer_addtie_profile(self, c, ct)

    def addtie_flux_profile(self, c, ct, val):
        return _swigDASpec.compcontainer_addtie_flux_profile(self, c, ct, val)

    def netnpar(self):
        return _swigDASpec.compcontainer_netnpar(self)
    __swig_destroy__ = _swigDASpec.delete_compcontainer

# Register compcontainer in _swigDASpec:
_swigDASpec.compcontainer_swigregister(compcontainer)
class struct_data_model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_swigDASpec.struct_data_model_n_get, _swigDASpec.struct_data_model_n_set)
    x = property(_swigDASpec.struct_data_model_x_get, _swigDASpec.struct_data_model_x_set)
    y = property(_swigDASpec.struct_data_model_y_get, _swigDASpec.struct_data_model_y_set)
    err = property(_swigDASpec.struct_data_model_err_get, _swigDASpec.struct_data_model_err_set)
    model = property(_swigDASpec.struct_data_model_model_get, _swigDASpec.struct_data_model_model_set)

    def __init__(self):
        _swigDASpec.struct_data_model_swiginit(self, _swigDASpec.new_struct_data_model())
    __swig_destroy__ = _swigDASpec.delete_struct_data_model

# Register struct_data_model in _swigDASpec:
_swigDASpec.struct_data_model_swigregister(struct_data_model)
class struct_parlimit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p = property(_swigDASpec.struct_parlimit_p_get, _swigDASpec.struct_parlimit_p_set)
    val = property(_swigDASpec.struct_parlimit_val_get, _swigDASpec.struct_parlimit_val_set)
    limit = property(_swigDASpec.struct_parlimit_limit_get, _swigDASpec.struct_parlimit_limit_set)

    def __init__(self):
        _swigDASpec.struct_parlimit_swiginit(self, _swigDASpec.new_struct_parlimit())
    __swig_destroy__ = _swigDASpec.delete_struct_parlimit

# Register struct_parlimit in _swigDASpec:
_swigDASpec.struct_parlimit_swigregister(struct_parlimit)

def fitfunc_mpfit(ny, np, p, deviates, derivs, data_model):
    return _swigDASpec.fitfunc_mpfit(ny, np, p, deviates, derivs, data_model)

def fitfunc_siman(np, p, data_model):
    return _swigDASpec.fitfunc_siman(np, p, data_model)
class curvefit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigDASpec.curvefit_swiginit(self, _swigDASpec.new_curvefit())
    data_model = property(_swigDASpec.curvefit_data_model_get, _swigDASpec.curvefit_data_model_set)
    par0 = property(_swigDASpec.curvefit_par0_get, _swigDASpec.curvefit_par0_set)
    pout = property(_swigDASpec.curvefit_pout_get, _swigDASpec.curvefit_pout_set)
    perrout = property(_swigDASpec.curvefit_perrout_get, _swigDASpec.curvefit_perrout_set)
    pout_tot = property(_swigDASpec.curvefit_pout_tot_get, _swigDASpec.curvefit_pout_tot_set)
    perrout_tot = property(_swigDASpec.curvefit_perrout_tot_get, _swigDASpec.curvefit_perrout_tot_set)
    nplimit = property(_swigDASpec.curvefit_nplimit_get, _swigDASpec.curvefit_nplimit_set)
    npout = property(_swigDASpec.curvefit_npout_get, _swigDASpec.curvefit_npout_set)
    npout_tot = property(_swigDASpec.curvefit_npout_tot_get, _swigDASpec.curvefit_npout_tot_set)
    plimit = property(_swigDASpec.curvefit_plimit_get, _swigDASpec.curvefit_plimit_set)
    iternum = property(_swigDASpec.curvefit_iternum_get, _swigDASpec.curvefit_iternum_set)
    chisq = property(_swigDASpec.curvefit_chisq_get, _swigDASpec.curvefit_chisq_set)
    reduced_chisq = property(_swigDASpec.curvefit_reduced_chisq_get, _swigDASpec.curvefit_reduced_chisq_set)
    DOF = property(_swigDASpec.curvefit_DOF_get, _swigDASpec.curvefit_DOF_set)
    status = property(_swigDASpec.curvefit_status_get, _swigDASpec.curvefit_status_set)

    def setdata(self, num, x, y, err):
        return _swigDASpec.curvefit_setdata(self, num, x, y, err)

    def setmodel(self, m):
        return _swigDASpec.curvefit_setmodel(self, m)

    def setinitp(self, p):
        return _swigDASpec.curvefit_setinitp(self, p)

    def setlimit(self, n, p, limit):
        return _swigDASpec.curvefit_setlimit(self, n, p, limit)

    def lmfit(self, nitermax=200):
        return _swigDASpec.curvefit_lmfit(self, nitermax)

    def siman(self, ntmax=1000, ninner=500, jump=0.03, ninit=1000, Tratio=0.02, delta=1.0e-6, nstable=25):
        return _swigDASpec.curvefit_siman(self, ntmax, ninner, jump, ninit, Tratio, delta, nstable)

    def mix_fit(self, ntmax, ninner, jump, ninit, Tratio, delta, nstable):
        return _swigDASpec.curvefit_mix_fit(self, ntmax, ninner, jump, ninit, Tratio, delta, nstable)

    def info(self):
        return _swigDASpec.curvefit_info(self)
    __swig_destroy__ = _swigDASpec.delete_curvefit

# Register curvefit in _swigDASpec:
_swigDASpec.curvefit_swigregister(curvefit)

